// controllers/taxiDriver.controller.js

const db = require("../models");
const TaxiDriver = db.taxiDriver;
const StaffDriver = db.staffDriver;
const axios = require("axios");
const { Op } = require("sequelize"); // ‡πÄ‡∏û‡∏¥‡πà‡∏° import ‡∏ï‡∏±‡∏ß Op
// require("dotenv").config();
const pool = require("../config/config.booking");

exports.create_byAdmin = async (req, res) => {
  try {
    const taxi_id = `Ta-${String(Date.now()).slice(-6)}`;

    const { taxi_lpr } = req.body;
    console.log("TaxiDriver Model: ", TaxiDriver);
    const newDriver = await TaxiDriver.create({
      taxi_id,
      taxi_lpr,
      driver: null,
      line_name: null,
      line_user_id: null,
      staffDriver_id: null,
    });

    res.status(201).send(newDriver);
  } catch (err) {
    console.error("üî• Sequelize error: ", err);
    res.status(500).send({ message: err.message, error: err.errors });
  }
};

// Get all drivers

exports.assignStaffToTaxiDriver = async (req, res) => {
  try {
    const { phone, taxi_id } = req.body;

    if (!phone || !taxi_id) {
      return res.status(400).send({ message: "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏∞‡∏ö‡∏∏ phone ‡πÅ‡∏•‡∏∞ taxi_id" });
    }

    // üîç ‡∏´‡∏≤ staffDriver ‡∏à‡∏≤‡∏Å‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£
    const staff = await StaffDriver.findOne({ where: { phone } });

    if (!staff) {
      return res
        .status(404)
        .send({ message: "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô‡∏Ç‡∏±‡∏ö‡∏£‡∏ñ‡∏à‡∏≤‡∏Å‡πÄ‡∏ö‡∏≠‡∏£‡πå‡∏ó‡∏µ‡πà‡∏£‡∏∞‡∏ö‡∏∏" });
    }

    // üîç ‡πÄ‡∏ä‡πá‡∏Ñ phone ‡∏ã‡πâ‡∏≥‡πÉ‡∏ô TaxiDriver (‡∏¢‡∏Å‡πÄ‡∏ß‡πâ‡∏ô taxi_id ‡∏ô‡∏µ‡πâ)
    const existingDriver = await TaxiDriver.findOne({
      where: {
        phone,
        taxi_id: { [db.Sequelize.Op.ne]: taxi_id }, // ‡πÑ‡∏°‡πà‡πÄ‡∏≠‡∏≤ taxi_id ‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï
      },
    });

    if (existingDriver) {
      return res.status(409).send({
        message: `‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡∏ô‡∏µ‡πâ‡∏ñ‡∏π‡∏Å‡πÉ‡∏ä‡πâ‡πÇ‡∏î‡∏¢ Taxi ID: ${existingDriver.taxi_id} ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß`,
      });
    }

    // ‚úÖ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï taxiDriver ‡∏î‡πâ‡∏ß‡∏¢‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å staffDriver
    const [updatedCount] = await TaxiDriver.update(
      {
        link_staff_id: staff.staffDriver_id,
        driver: staff.driver,
        phone: staff.phone,
        line_name: staff.line_name,
        line_user_id: staff.line_user_id,
      },
      {
        where: { taxi_id },
      }
    );

    if (updatedCount === 0) {
      return res.status(404).send({ message: "‡πÑ‡∏°‡πà‡∏û‡∏ö taxiDriver ‡∏ó‡∏µ‡πà‡∏£‡∏∞‡∏ö‡∏∏" });
    }

    return res
      .status(200)
      .send({ message: "‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏ô‡∏Ç‡∏±‡∏ö‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à", staff_linked: staff });
  } catch (error) {
    console.error("‚ùå Error assigning staff to taxiDriver:", error);
    res.status(500).send({ message: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î", error: error.message });
  }
};

exports.findAll = async (req, res) => {
  try {
    const drivers = await TaxiDriver.findAll();
    res.send(drivers);
  } catch (err) {
    res.status(500).send({ message: err.message });
  }
};

exports.findTaxiUse = async (req, res) => {
  try {
    const drivers = await TaxiDriver.findAll({
      where: {
        link_staff_id: {
          [Op.ne]: null, // ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÅ‡∏ñ‡∏ß‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡πÄ‡∏õ‡πá‡∏ô null
        },
      },
    });
    res.send(drivers);
  } catch (err) {
    res.status(500).send({ message: err.message });
  }
};

exports.findByLineUserId = async (req, res) => {
  const { lineId } = req.params;

  try {
    const drivers = await TaxiDriver.findAll({
      where: { line_user_id: lineId }, // ‡∏ä‡∏∑‡πà‡∏≠‡∏ü‡∏¥‡∏•‡∏î‡πå‡πÉ‡∏ô‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô lineId
    });

    if (drivers.length === 0) {
      return res.status(404).json({ message: "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•" });
    }

    res.json(drivers);
  } catch (error) {
    console.error("‚ùå Error:", error);
    res.status(500).json({ message: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏†‡∏≤‡∏¢‡πÉ‡∏ô‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå" });
  }
};
// Update driver by id

exports.update = async (req, res) => {
  try {
    const { taxi_id } = req.body;

    if (!taxi_id) {
      return res
        .status(400)
        .send({ message: "Missing taxi_id in request body." });
    }

    const [updated] = await TaxiDriver.update(req.body, {
      where: { taxi_id: taxi_id },
    });

    if (updated) {
      const updatedDriver = await TaxiDriver.findOne({
        where: { taxi_id: taxi_id },
      });
      return res.send(updatedDriver);
    }

    res.status(404).send({ message: "Driver not found" });
  } catch (err) {
    res.status(500).send({ message: err.message });
  }
};

exports.delete = async (req, res) => {
  try {
    const { taxi_id } = req.body;

    if (!taxi_id) {
      return res
        .status(400)
        .send({ message: "Missing taxi_id in request body." });
    }

    const deleted = await TaxiDriver.destroy({
      where: { taxi_id: taxi_id },
    });

    if (deleted) {
      return res.send({
        message: `Driver with taxi_id ${taxi_id} deleted successfully.`,
      });
    }

    res.status(404).send({ message: "Driver not found." });
  } catch (err) {
    res.status(500).send({ message: err.message });
  }
};

// line
// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÉ‡∏´‡∏°‡πà: ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå LINE ‡∏à‡∏≤‡∏Å user ID
// ‡∏£‡∏±‡∏ö webhook ‡∏à‡∏≤‡∏Å LINE Messaging API

exports.handleLineWebhook = async (req, res) => {
  try {
    const events = req.body.events || [];

    console.log("üì® events", events);

    for (const event of events) {
      const line_user_id = event.source.userId;

      // ‡∏Å‡∏£‡∏ì‡∏µ event ‡πÄ‡∏õ‡πá‡∏ô postback
      if (event.type === "postback") {
        const postbackData = event.postback?.data || "";
        const params = new URLSearchParams(postbackData);

        if (postbackData.includes("action=confirm")) {
          const bookingIdMatch = postbackData.match(/bookingId=([^&]+)/);
          const bookingId = bookingIdMatch ? bookingIdMatch[1] : "‡πÑ‡∏°‡πà‡∏ó‡∏£‡∏≤‡∏ö";

          const params = new URLSearchParams(postbackData);
          const action = params.get("action");
          const direction = params.get("direction"); // <--- ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î‡∏ô‡∏µ‡πâ

          console.log(
            `‚úÖ ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ ${line_user_id} ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏á‡∏≤‡∏ô Booking ID: ${bookingId}`
          );

          try {
            // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• LPR
            const driver = await TaxiDriver.findOne({
              where: { line_user_id },
            });

            if (!driver) {
              console.log("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö line_user_id ‡∏ô‡∏µ‡πâ‡πÉ‡∏ô table taxiDriver");
              return;
            }

            const taxi_lpr = driver.taxi_lpr; // ‡∏´‡∏£‡∏∑‡∏≠ driver.plate_number ‡πÅ‡∏•‡πâ‡∏ß‡πÅ‡∏ï‡πà‡∏ä‡∏∑‡πà‡∏≠‡∏à‡∏£‡∏¥‡∏á‡πÉ‡∏ô DB
            console.log("üöï ‡∏û‡∏ö‡πÄ‡∏•‡∏Ç‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô taxi_lpr =", taxi_lpr);

            // ‡πÄ‡∏≠‡∏≤ bookingId ‡πÅ‡∏•‡∏∞ taxi_lpr find rows ‡πÉ‡∏ô HappyData
            const connection = await pool.getConnection();
            const [rows] = await connection.execute(
              `
              SELECT * FROM HappyData 
              WHERE Booking_ID = ? 
              AND (TAXI_lpr_go = ? OR TAXI_lpr_back = ?)
              `,
              [bookingId, taxi_lpr, taxi_lpr]
            );

            if (rows.length === 0) {
              console.log("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô HappyData");
            } else {
              const row = rows[0];
              let confirmField = null;
              //todo ====hold start
              // console.log("CHECK DIRECTION ", direction);
              //Todo ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
              if (direction === "go") {
                await connection.execute(
                  `UPDATE HappyData SET CONFIRM_go = ? WHERE Booking_ID = ?`,
                  ["ok", bookingId]
                );
                // updated = true;
              } else {
                await connection.execute(
                  `UPDATE HappyData SET CONFIRM_back = ? WHERE Booking_ID = ?`,
                  ["ok", bookingId]
                );
                // updated = true;
              }
            }

            // todo -- end
            // ‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ç‡∏≠‡∏ö‡∏Ñ‡∏∏‡∏ì
            await axios.post(
              "https://api.line.me/v2/bot/message/reply",
              {
                replyToken: event.replyToken,
                messages: [
                  {
                    type: "text",
                    text: `‡∏Ç‡∏≠‡∏ö‡∏Ñ‡∏∏‡∏ì‡∏ó‡∏µ‡πà‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏á‡∏≤‡∏ô Booking ID: ${bookingId} ‡∏Ñ‡πà‡∏∞`,
                  },
                ],
              },
              {
                headers: {
                  Authorization: `Bearer ${process.env.LINE_CHANNEL_ACCESS_TOKEN}`,
                  "Content-Type": "application/json",
                },
              }
            );
          } catch (error) {
            console.error(
              "‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï CONFIRM:",
              error.message
            );
          }

          continue; // ‡πÄ‡∏™‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß‡∏Ç‡πâ‡∏≤‡∏°‡πÑ‡∏õ
        }

        if (postbackData.includes("action=reject")) {
          const bookingIdMatch = postbackData.match(/bookingId=([^&]+)/);
          const bookingId = bookingIdMatch ? bookingIdMatch[1] : "‡πÑ‡∏°‡πà‡∏ó‡∏£‡∏≤‡∏ö";

          console.log(
            `‚ùå ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ ${line_user_id} ‡∏õ‡∏è‡∏¥‡πÄ‡∏™‡∏ò‡∏á‡∏≤‡∏ô Booking ID==>: ${bookingId}`
          );

          try {
            // ‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏±‡∏ö‡∏ó‡∏£‡∏≤‡∏ö
            await axios.post(
              "https://api.line.me/v2/bot/message/reply",
              {
                replyToken: event.replyToken,
                messages: [
                  {
                    type: "text",
                    text: `‡∏£‡∏±‡∏ö‡∏ó‡∏£‡∏≤‡∏ö‡∏Å‡∏≤‡∏£‡∏õ‡∏è‡∏¥‡πÄ‡∏™‡∏ò‡∏á‡∏≤‡∏ô Booking ID: ${bookingId} ‡∏Ñ‡πà‡∏∞`,
                  },
                ],
              },
              {
                headers: {
                  Authorization: `Bearer ${process.env.LINE_CHANNEL_ACCESS_TOKEN}`,
                  "Content-Type": "application/json",
                },
              }
            );
          } catch (error) {
            console.error(
              "‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï CONFIRM:",
              error.message
            );
          }

          continue;
        }
      }

      // ‡∏Å‡∏£‡∏ì‡∏µ event ‡πÄ‡∏õ‡πá‡∏ô‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° (message)
      if (event.type === "message" && event.message.type === "text") {
        const userText = (event.message.text || "").toLowerCase();

        //todo test start
        if (userText === "wee") {
          await axios.post(
            "https://api.line.me/v2/bot/message/reply",
            {
              replyToken: event.replyToken,
              messages: [{ type: "text", text: "‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ wee" }],
            },
            {
              headers: {
                Authorization: `Bearer ${process.env.LINE_CHANNEL_ACCESS_TOKEN}`,
                "Content-Type": "application/json",
              },
            }
          );
          continue;
        }
        //todo test end

        if (userText.includes("‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏á‡∏≤‡∏ô‡πÅ‡∏•‡πâ‡∏ß")) {
          console.log(
            `‚úÖ ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ ${line_user_id} ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°====: ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏á‡∏≤‡∏ô‡πÅ‡∏•‡πâ‡∏ß`
          );

          await axios.post(
            "https://api.line.me/v2/bot/message/reply",
            {
              replyToken: event.replyToken,
              messages: [{ type: "text", text: "‡∏Ç‡∏≠‡∏ö‡∏Ñ‡∏∏‡∏ì‡∏ó‡∏µ‡πà‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏á‡∏≤‡∏ô‡∏Ñ‡πà‡∏∞" }],
            },
            {
              headers: {
                Authorization: `Bearer ${process.env.LINE_CHANNEL_ACCESS_TOKEN}`,
                "Content-Type": "application/json",
              },
            }
          );

          continue;
        }

        if (userText.includes("‡∏õ‡∏è‡∏¥‡πÄ‡∏™‡∏ò‡∏á‡∏≤‡∏ô")) {
          // TODO: ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏õ‡∏è‡∏¥‡πÄ‡∏™‡∏ò‡πÉ‡∏ô DB
          // confirm = "cancle"

          try {
            //Todo ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

            const userText = event.message.text || "";
            let check_eject = "";
            // console.log("‡∏õ‡∏è‡∏¥‡πÄ‡∏™‡∏ò‡∏á‡∏≤‡∏ô userText ", userText);
            if (userText.includes("‡∏Ç‡∏≤‡πÑ‡∏õ")) {
              console.log("‡∏õ‡∏è‡∏¥‡πÄ‡∏™‡∏ò‡∏á‡∏≤‡∏ô ‡∏Ç‡∏≤‡πÑ‡∏õ ++++++++++++> userText ", userText);
              check_eject = "go";
            } else {
              console.log("‡∏õ‡∏è‡∏¥‡πÄ‡∏™‡∏ò‡∏á‡∏≤‡∏ô ‡∏Ç‡∏≤‡∏Å‡∏•‡∏±‡∏ö ++++++++++++> userText ", userText);
              check_eject = "back";
            }

            console.log("check_eject ", check_eject);

            // ‡πÉ‡∏ä‡πâ RegExp ‡∏´‡∏≤ bookingId ‡∏à‡∏≤‡∏Å‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
            const bookingIdMatch = userText.match(
              /Booking ID:\s*([a-zA-Z0-9]+)/
            );

            const booking_Id = bookingIdMatch ? bookingIdMatch[1] : null;

            if (booking_Id) {
              console.log("üì¶ ‡∏î‡∏∂‡∏á booking_Id ‡πÑ‡∏î‡πâ:", booking_Id);
            } else {
              console.log("‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏û‡∏ö booking_Id ‡πÉ‡∏ô‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ô‡∏µ‡πâ");
            }

            //===================

            // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• LPR
            const driver = await TaxiDriver.findOne({
              where: { line_user_id },
            });

            if (!driver) {
              console.log("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö line_user_id ‡∏ô‡∏µ‡πâ‡πÉ‡∏ô table taxiDriver");
              return;
            }

            const taxi_lpr = driver.taxi_lpr; // ‡∏´‡∏£‡∏∑‡∏≠ driver.plate_number ‡πÅ‡∏•‡πâ‡∏ß‡πÅ‡∏ï‡πà‡∏ä‡∏∑‡πà‡∏≠‡∏à‡∏£‡∏¥‡∏á‡πÉ‡∏ô DB
            console.log("üöï ‡∏û‡∏ö‡πÄ‡∏•‡∏Ç‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô taxi_lpr =", taxi_lpr);

            // ‡πÄ‡∏≠‡∏≤ bookingId ‡πÅ‡∏•‡∏∞ taxi_lpr find rows ‡πÉ‡∏ô HappyData
            const connection = await pool.getConnection();
            const [rows] = await connection.execute(
              `
              SELECT * FROM HappyData 
              WHERE Booking_ID = ? 
              AND (TAXI_lpr_go = ? OR TAXI_lpr_back = ?)
              `,
              [booking_Id, taxi_lpr, taxi_lpr]
            );

            console.log("rows -------> ", rows);
            console.log("taxi_lpr -------> ", taxi_lpr);
            console.log("rows taxi_lpr go-------> ", rows[0].TAXI_lpr_go);
            console.log("rows CONFIRM_go-------> ", rows[0].CONFIRM_go);
            console.log("rows taxi_lpr back-------> ", rows[0].TAXI_lpr_back);
            console.log("rows CONFIRM_back-------> ", rows[0].CONFIRM_back);

            if (rows.length === 0) {
              console.log("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô HappyData");
            } else {
              const row = rows[0];

              let updated = false;
              // console.log("row.TAXI_lpr_go----> ", row.TAXI_lpr_go);
              // console.log("row.CONFIRM_go----> ", row.CONFIRM_go);
              //todo hold ---start
              // if (row.TAXI_lpr_go === taxi_lpr) {
              //   console.log(`üîÑ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏ü‡∏¥‡∏•‡∏î‡πå CONFIRM_go ‡πÄ‡∏õ‡πá‡∏ô "cancle"`);

              //   await connection.execute(
              //     `UPDATE HappyData SET CONFIRM_go = ? WHERE Booking_ID = ?`,
              //     ["cancle", booking_Id]
              //   );

              //   updated = true;
              // }

              // if (row.TAXI_lpr_back === taxi_lpr) {
              //   console.log(`üîÑ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏ü‡∏¥‡∏•‡∏î‡πå CONFIRM_back ‡πÄ‡∏õ‡πá‡∏ô "cancle"`);

              //   await connection.execute(
              //     `UPDATE HappyData SET CONFIRM_back = ? WHERE Booking_ID = ?`,
              //     ["cancle", booking_Id]
              //   );

              //   updated = true;
              // }

              //todo hold ---end

              //todo test

              if (check_eject === "go") {
                await connection.execute(
                  `UPDATE HappyData SET CONFIRM_go = ? WHERE Booking_ID = ?`,
                  ["cancle", booking_Id]
                );
                updated = true;
              } else {
                await connection.execute(
                  `UPDATE HappyData SET CONFIRM_back = ? WHERE Booking_ID = ?`,
                  ["cancle", booking_Id]
                );
                updated = true;
              }

              //todo test end

              if (!updated) {
                console.log(
                  "‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏ü‡∏¥‡∏•‡∏î‡πå‡πÉ‡∏î‡∏ó‡∏µ‡πà‡∏Ñ‡∏ß‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï ‡∏´‡∏£‡∏∑‡∏≠‡∏ñ‡∏π‡∏Å‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß"
                );
              } else {
                console.log("‚úÖ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢");
              }
            }

            // TODO: ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏õ‡∏è‡∏¥‡πÄ‡∏™‡∏ò‡πÉ‡∏ô DB --END
            await axios.post(
              "https://api.line.me/v2/bot/message/reply",
              {
                replyToken: event.replyToken,
                messages: [{ type: "text", text: "‡∏£‡∏±‡∏ö‡∏ó‡∏£‡∏≤‡∏ö‡∏Å‡∏≤‡∏£‡∏õ‡∏è‡∏¥‡πÄ‡∏™‡∏ò‡∏á‡∏≤‡∏ô‡∏Ñ‡πà‡∏∞" }],
              },
              {
                headers: {
                  Authorization: `Bearer ${process.env.LINE_CHANNEL_ACCESS_TOKEN}`,
                  "Content-Type": "application/json",
                },
              }
            );
          } catch (error) {
            console.error(
              "‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï CONFIRM:",
              error.message
            );
          }

          continue;
        }
      }

      // ‡∏Å‡∏£‡∏ì‡∏µ‡∏≠‡∏∑‡πà‡∏ô ‡πÜ ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö‡∏≠‡∏∞‡πÑ‡∏£
      console.log(`‚ÑπÔ∏è ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö event type: ${event.type}`);
    }

    return res.status(200).send("OK");
  } catch (err) {
    console.error("‚ùå Webhook Error:", err.message);
    return res.status(500).send({ message: "Webhook processing failed." });
  }
};
