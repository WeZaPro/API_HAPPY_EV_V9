const db = require("../models");
const StaffDriver = db.staffDriver;
const axios = require("axios");
// require("dotenv").config();
const pool = require("../config/config.booking");

exports.create_staffDriver = async (req, res) => {
  try {
    const staffDriver_id = `ST-Driver-${String(Date.now()).slice(-6)}`;
    const { driver, phone, line_name, line_user_id } = req.body;

    // üîç ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ phone ‡∏´‡∏£‡∏∑‡∏≠ line_user_id ‡∏ã‡πâ‡∏≥‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    const existingDriver = await StaffDriver.findOne({
      where: {
        [db.Sequelize.Op.or]: [{ phone }, { line_user_id }],
      },
    });

    if (existingDriver) {
      let duplicateField =
        existingDriver.phone === phone ? "‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£" : "LINE User ID";
      return res.status(400).send({
        message: `‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏ô‡∏µ‡πâ‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡πÅ‡∏•‡πâ‡∏ß (${duplicateField} ‡∏ã‡πâ‡∏≥)`,
      });
    }

    // ‚úÖ ‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÉ‡∏´‡πâ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÉ‡∏´‡∏°‡πà
    const newStaffDriver = await StaffDriver.create({
      staffDriver_id,
      driver,
      phone,
      line_name,
      line_user_id,
    });

    res.status(201).send(newStaffDriver);
  } catch (err) {
    console.error("üî• Sequelize error: ", err);
    res.status(500).send({ message: err.message, error: err.errors });
  }
};
exports.getAllStaffDrivers = async (req, res) => {
  try {
    const staffDrivers = await StaffDriver.findAll({
      order: [["createdAt", "DESC"]], // ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡∏Å‡πà‡∏≠‡∏ô (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ field createdAt)
    });
    res.status(200).send(staffDrivers);
  } catch (err) {
    console.error("üî• Sequelize error: ", err);
    res.status(500).send({ message: err.message, error: err.errors });
  }
};

// controller.js

// controller.js

exports.update_staffDriver = async (req, res) => {
  try {
    const { staffDriver_id, driver, phone } = req.body;

    if (!staffDriver_id) {
      return res.status(400).send({ message: "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏∞‡∏ö‡∏∏ staffDriver_id" });
    }

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ record ‡∏≠‡∏¢‡∏π‡πà‡∏à‡∏£‡∏¥‡∏á‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    const staffDriver = await StaffDriver.findOne({
      where: { staffDriver_id },
    });
    if (!staffDriver) {
      return res.status(404).send({ message: "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô‡∏Ç‡∏±‡∏ö‡∏£‡∏ñ" });
    }

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ phone ‡∏´‡∏£‡∏∑‡∏≠ line_user_id ‡∏ã‡πâ‡∏≥‡∏Å‡∏±‡∏ö‡∏Ñ‡∏ô‡∏≠‡∏∑‡πà‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    // if (phone || line_user_id) {
    //   const duplicate = await StaffDriver.findOne({
    //     where: {
    //       [db.Sequelize.Op.or]: [{ phone }, { line_user_id }],
    //       staffDriver_id: { [db.Sequelize.Op.ne]: staffDriver_id }, // ‡∏¢‡∏Å‡πÄ‡∏ß‡πâ‡∏ô record ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
    //     },
    //   });

    //   if (duplicate) {
    //     let duplicateField =
    //       duplicate.phone === phone ? "‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£" : "LINE User ID";
    //     return res.status(400).send({
    //       message: `‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÑ‡∏î‡πâ (${duplicateField} ‡∏ã‡πâ‡∏≥‡∏Å‡∏±‡∏ö‡∏Ñ‡∏ô‡∏≠‡∏∑‡πà‡∏ô)`,
    //     });
    //   }
    // }

    // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
    await staffDriver.update({
      driver,
      phone,
    });

    res.status(200).send({
      message: "‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à",
      data: staffDriver,
    });
  } catch (err) {
    console.error("üî• Sequelize error: ", err);
    res.status(500).send({ message: err.message, error: err.errors });
  }
};
